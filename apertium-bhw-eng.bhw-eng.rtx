!!!!!!!!!!!!!!!
!! ATTRIBUTE CATEGORIES
!!!!!!!!!!!!!!!

number = (ND sg) sg du pc pl sp plinan plan ND;
gender = (GD m) m f mf GD;
det_type = def ind dem itg;
tense = (TD past) pres past fut ifi pri fti TD;
person = p1 p2 p3;
prn_type = subj obj;
spc = spc;
pos = pos;
possessor = px1sg px1duex px1duinc px1pc px1plex px1plinc 
            px2sg px2du px2pc px2pl px2plan px2plinan 
            px3sg px3du px3pc px3plan px3plinan;

!!!!!!!!!!!!!!!
!! OUTPUT PATTERNS
!!!!!!!!!!!!!!!

n: _.number;
adj: _.gender.number;
det_default: _.det_type;
det_def: _.det_type.number;
prn: _.prn_type.person.gender.number;
v: _.tense;
adv: _;
sent: _;

NP: _.number;
DP: _.person.number;
VP: _.person.gender.number.tense;
S: _;
DET:_.det_type.person.number;

!!!!!!!!!!!!!!!
!! TAG-REWRITE RULES
!!!!!!!!!!!!!!!

number > number : du pl, pc pl, plinan pl, plan pl;
possessor > person: px1sg p1, px1duex p1, px1duinc p1, px1pc p1, px1plex p1, px1plinc p1,
            px2sg p2, px2du p2, px2pc p2, px2pl p2, px2plan p2, px2plinan p2,
            px3sg p3, px3du p3, px3pc p3, px3plan p3, px3plinan p3;
possessor > number: px1sg sg, px1duex pl, px1duinc pl, px1pc pl, px1plex pl, px1plinc pl,
            px2sg sg, px2du pl, px2pc pl, px2pl pl, px2plan pl, px2plinan pl,
            px3sg sg, px3du pl, px3pc pl, px3plan pl, px3plinan pl;


!!!!!!!!!!!!!!!
!! MACROS
!!!!!!!!!!!!!!!

det: (if (1.det_type = def or 1.det_type = ind)
        1(det_def)
      else
        1(det_default));

!!!!!!!!!!!!!!!
!! REDUCTION RULES
!!!!!!!!!!!!!!!

DET -> %prn.$number/sl.*.spc { 1(det) } | 
       %prn.$number/sl.*.spc det.dem { 2(det_def)[number=1.number/sl] };
NP -> %n { %1 } ;

DP -> NP %DET { 2(det) _ 1[number=2.number] } |
      %prn { %1 } |
      %NP { %1 } | 
      1: %n.pos.[possessor].[number] { prpers@det.pos.[1.possessor>person].
            [(if (1.possessor>person = p3 & 1.possessor>number = sg) m else mf)].
            [1.possessor>number] _ 1 } |
      NP %det.pos.[possessor].[number]  { prpers@det.pos.[2.possessor>person].
            [(if (2.possessor>person = p3 & 2.possessor>number = sg) m else mf)].
            [2.possessor>number] _ 1[number=2.number] } |
      2: %DP NP det.pos.[possessor].[number] { 1[number=3.possessor>number] 's@gen _ 2[number=3.number] } |
      NP %DP det.pos.[possessor].[number] { 2[number=3.possessor>number] 's@gen _ 1[number=3.number] } ;
VP -> %v { 1 } |
      %v %prn { 1 _ 2[prn_type=obj] } |
      %v DP { 1 _ 2 } ;
S -> DP VP { 1 _ 2 } |
     DP adv VP { 1 _ 2 _ 3 } |
     VP { prpers@prn.subj.[1.person].[1.gender].[1.number>number] _ 1} ;

! Resources:
! http://wiki.apertium.org/wiki/Apertium-recursive
! http://wiki.apertium.org/wiki/Apertium-recursive/Formalism
! http://wiki.apertium.org/wiki/Apertium-recursive/Cookbook
